<div class="form-group" aria-required="true">
  <div class="formRow">
    <%= form.label :featured_memory_id, 'Featured memory', class: 'control-label' %>
    <%= form.text_field :featured_memory_id, class: 'form-control', data: {featured_memory_id: true} %>
    <%= link_to 'Go', '#', class: 'button navy select', data: {featured_memory_select: true} %>
    <% home_page.errors[:featured_memory_id].each do |error| %>
      <span class="help-block"><%= error %></span>
    <% end -%>
  </div>
</div>

<%= form.hidden_field :remote_hero_image_url, data: {remote_url: true}, class: 'image_url' %>

<%= render 'shared/image_editor', form: form,
                                image_url: home_page.hero_image_url,
                                display_class: 'hero',
                                width: 1140,
                                height: 525 %>

<div class="form-group" aria-required="true">
  <div class="formRow">
    <%= form.label :featured_scrapbook_id, 'Featured scrapbook', class: 'control-label' %>
    <%= form.text_field :featured_scrapbook_id, class: 'form-control', data: {featured_scrapbook_id: true} %>
    <%= link_to 'Go', '#', class: 'button navy select', data: {featured_scrapbook_select: true} %>
    <% home_page.errors[:featured_scrapbook_id].each do |error| %>
      <span class="help-block"><%= error %></span>
    <% end -%>
  </div>
</div>

<div class="form-group" aria-required="true">
  <div class="formRow">
    <%= form.label :featured_scrapbook_memory_ids, 'Featured scrapbook memories', class: 'control-label' %>
    <%= form.hidden_field :featured_scrapbook_memory_ids %>
    <span>Please select a scrapbook first.</span>
    <% home_page.errors[:featured_scrapbook_memory_ids].each do |error| %>
      <span class="help-block"><%= error %></span>
    <% end -%>


    <div id="grid">
      <div class="masonry-loading-spinner"><div class="spinner"></div></div>
      <div class="memory-container">
        <div id="memories" class="masonry-grid">
          <div class="grid-sizer"></div>
        </div>
      </div>
    </div>

  </div>
</div>


<%= content_for :script_tags  do %>
  <script type="text/template" id="memory-template">
    <div class="memory thumb masonry">
      <div class="padding">
        <div class="imageWrapper">
          <a class="featured-scrapbook-memory {{ classes }}" data-id="{{ scrapbook_memory_id }}" data-featured-scrapbook-memory>
            <img src="{{ thumbnail_url }}">
            <span class="glyphicon glyphicon-ok"></span>
          </a>
        </div>
      </div>
    </div>
  </script>

  <script>
    var $remote_url = $('[data-remote-url]')
      , $featured_memory_id = $('[data-featured-memory-id]')
      , $featured_scrapbook_id = $('[data-featured-scrapbook-id]')
      , $featured_scrapbook_memory = $('[data-featured-scrapbook-memory]')
      , requiredNumMemories = <%= HomePage::REQUIRED_SCRAPBOOK_MEMORIES %>;

    var clearErrorsOn = function (element) {
      var formGroup = element.closest('.form-group');

      formGroup.find('.field_with_errors .control-label').unwrap();
      formGroup.find('.field_with_errors .form-control').unwrap();
      formGroup.find('.formRow .help-block').remove();
    };

    var wrapFieldWithErrors = function (formGroup, element) {
      var elementToWrap = $(formGroup).find(element);
      if (!elementToWrap.parent().hasClass('field_with_errors')) {
        elementToWrap.wrap('<div class="field_with_errors"></div>');
      }
    };

    var showError = function (errorMessage, element) {
      var formGroup = element.closest('.form-group');

      wrapFieldWithErrors(formGroup, '.control-label');
      wrapFieldWithErrors(formGroup, '.form-control');
      $(formGroup).find('.formRow').append('<span class="help-block">' + errorMessage + '</span>');
    };

    var didSuccessfullyFetchMemory = function (data) {
      var id = $($featured_memory_id).val(),
          errorMessage;

      if (data.type === 'Written') {
        errorMessage = 'This memory is a Written memory. You must select a Picture memory.';
      } else if (data.file === null) {
        errorMessage = 'This memory does not have a picture attached.';
      }

      if (errorMessage) {
        $("#image-editor").hide();
        showError(errorMessage, $featured_memory_id);
      } else {
        $remote_url.val(data.file.url).trigger('change');
      }
    };

    var classFor = function (id) {
      var selectedIds = $('input#home_page_featured_scrapbook_memory_ids')
                          .val()
                          .split(',')
                          .map(function (id) { return parseInt(id); });
      return selectedIds.indexOf(id) > -1 ? 'selected' : '';
    };

    var didSuccessfullyFetchScrapbook = function (data) {
      var id = $($featured_scrapbook_id).val()
        , errorMessage;

      if (data.memories === null || data.memories.length < requiredNumMemories) {
        errorMessage = 'Featured scrapbook must contain at least ' + requiredNumMemories + ' memories.';
      }

      if (errorMessage) {
        showError(errorMessage, $featured_scrapbook_id);
      } else {
        $('.masonry-loading-spinner .spinner').spin();
        $('.masonry-loading-spinner').show();

        $.each(data.memories, function (i, memory) {
          _.templateSettings = {
            interpolate: /\{\{(.+?)\}\}/g
          };
          var template = _.template($('#memory-template').html(), {
            thumbnail_url: memory.thumbnail,
            scrapbook_memory_id: memory.id,
            classes: classFor(memory.id)
          });
          $('#memories').append(template);
        });

        $('.masonry-grid').packery('destroy');
        runMasonry();
      }
    };

    var didErrorOnFetchMemory = function (error) {
      var errorMessage = checkForErrors(error, $featured_memory_id.val(), 'memory');
      if (errorMessage) {
        $("#image-editor").hide();
        showError(errorMessage, $featured_memory_id);
      }
    }

    var didErrorOnFetchScrapbook = function (error) {
      var errorMessage = checkForErrors(error, $featured_scrapbook_id.val(), 'scrapbook');
      if (errorMessage) {
        showError(errorMessage, $featured_scrapbook_id);
      }
    };

    var checkForErrors = function (error, id, itemName) {
      var errorMessage;

      if (error.status === 404) {
        errorMessage = 'must exist and be publicly visible';
      }
      return errorMessage;
    }

    $('[data-featured-memory-select]').on('click', function (e) {
      e.preventDefault();

      if (!present($featured_memory_id.val())) return;

      var url = '/memories/' + $featured_memory_id.val();

      clearErrorsOn($featured_memory_id);

      $.ajax({
        url: url,
        method:'GET',
        dataType: 'json'
      }).done(didSuccessfullyFetchMemory)
        .error(didErrorOnFetchMemory);
    });

    $('[data-featured-scrapbook-select]').on('click', function (e) {
      e.preventDefault();

      if (!present($featured_scrapbook_id.val())) return;

      var url = '/scrapbooks/' + $featured_scrapbook_id.val();

      clearErrorsOn($featured_scrapbook_id);
      // clearErrorsOn($featured_scrapbook_memory_ids);

      $.ajax({
        url: url,
        method:'GET',
        dataType: 'json'
      }).done(didSuccessfullyFetchScrapbook)
        .error(didErrorOnFetchScrapbook);
    });

    var present = function (value) {
      return value !== undefined && value !== null && value !== '';
    };

    var wasSelected = function (element) {
      return element.hasClass('selected');
    };

    $('#memories').on('click', $featured_scrapbook_memory, function (e) {
      e.preventDefault();

      var $scrapbook_memory_ids = $('input#home_page_featured_scrapbook_memory_ids')
        , $clicked = $(e.target).closest('a')
        , id = $clicked.data('id')
        , clickedSoFar = $scrapbook_memory_ids.val().split(',').filter(present);

      clickedSoFar = clickedSoFar.filter(function (memId) {
        return memId != id;
      });

      if (wasSelected($clicked)) {
        $clicked.removeClass('selected');
      } else if (clickedSoFar.length < requiredNumMemories) {
        $clicked.addClass('selected');
        clickedSoFar.push(id);
      } else {
        alert('You can only select 4 memories at a time. Please unselect a memory before selecting this one.');
      }

      $scrapbook_memory_ids.val(clickedSoFar.join(','));
      console.log('scrapbook_memory_ids', $scrapbook_memory_ids.val());
    });

    $(document).ready(function () {
      if ($featured_scrapbook_id.val()) {
        $('[data-featured-scrapbook-select]').trigger('click');
      }
    });
  </script>
<% end %>

